PARSER_BEGIN(comp)
class comp 
{
	public static void main( String[] args )throws ParseException
	{
		try
		{
			comp analizador = new comp( System.in ) ;
			analizador.Programa() ; 
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Analizador: erro durante o processo de an√°lise.");
		}
	}
}
PARSER_END(comp)

SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" 
}
TOKEN:
{
	  <TYPES:"inum"|"idec"|"istr"|"ichr">{System.out.println("ENTERO -> "+image);}
	| <NUMBER : (["0"-"9"])+ > {System.out.print("NUMERO "+image+"\r\n");}
	| <IDENTIFIER : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.print("IDENTIFICADOR -> "+image+"\r\n");}
	| <CADENA : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>{System.out.print("CADENA -> "+image+"\r\n");}
}
TOKEN : 
{ 
	  <ASIGNACION : "= "> {System.out.println("ASIGNACION -> "+image+"\r\n");}
	
}
TOKEN:
{
	  <MAIN: "public static void Main() ">{System.out.println("MAIN -> "+image);}
	| <PROGRAMA: "Programa " > {System.out.println("PROGRAMA -> "+image);}
	| <IF: "ien " >{System.out.println("IF -> "+image);}
}
TOKEN:
{
      <LPAREN: "(" >{System.out.println("IPAREN -> "+image);}
	| <RPAREN: ")" >{System.out.println("DPAREN -> "+image);}
	| <LBRACE: "{" >{System.out.println("ILLAVE -> "+image);}
	| <RBRACE: "}" >{System.out.println("DLLAVE -> "+image);}
	| <SEMICOLON: ";" >{System.out.println("PUNTO Y COMA -> "+image);}
}

void Programa() :
{}
{
	<PROGRAMA><IDENTIFIER><LBRACE><RBRACE><EOF>	
}